// pipeline {
//   agent any
//     AWS_DEFAULT_REGION = 'ap-southeast-2' //credentials('AWS_DEFAULT_REGION')
//     ECR_REGISTRY = credentials' ('ECR_REGISTRY') //'271584491311.dkr.ecr.ap-southeast-2.amazonaws.com/node-app
//     ECR_REPOSITORY = 'node-app'
//     IMAGE_TAG = 'latest'
//     BACKEND_API = credentials('BACKEND_API')
//     BACKEND_PORT = credentials('BACKEND_PORT')
//   }

//   stages {
//     stage('Checkout') {
//             steps {
//                  git branch: 'Do-06-Hang', url: 'https://github.com/hangzh521/FotoPie-Front-end.git'
//             }
//         }
    
//     stage('Login to Amazon ECR') {
//         steps {
//         //    withAWS(region: 'ap-southeast-2', credentials: 'my-aws-credentials') 
//            script {
//              sh 'aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 271584491311.dkr.ecr.ap-southeast-2.amazonaws.com/node-app'
//           }
//         }
//      }

//     stage('Build and tag Docker image') {
//       steps {
//         script {
//         sh "docker build --build-arg BACKEND_API='$BACKEND_API' --build-arg BACKEND_PORT='$BACKEND_PORT' -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:${env.GITHUB_SHA} ."
//       }
//     }
//  }

//     stage('Tag and Push Docker image to Amazon ECR') {
//       steps {
//         script {
//         sh "docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
//         sh "docker push $ECR_REGISTRY/$ECR_REPOSITORY:${env.GITHUB_SHA}"
//       }
//      }
//    }
//   }
// }


 pipeline {
    agent any
    
    environment {
    AWS_DEFAULT_REGION = 'ap-southeast-2'
    ECR_REPO = 'node-app'
    IMAGE_TAG = 'latest'
    ECR_REGISTRY = '271584491311.dkr.ecr.ap-southeast-2.amazonaws.com/node-app'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/Do-06-Hang']], userRemoteConfigs: [[url: 'https://github.com/hangzh521/FotoPie-Front-end.git']]])
            }
        }
        stage('Build Docker Image') {
            environment {
                BACKEND_API = credentials('BACKEND_API')
                BACKEND_PORT = credentials('BACKEND_PORT')
            }
        
            steps {
                sh "docker build --build-arg BACKEND_API=${env.BACKEND_API} --build-arg BACKEND_PORT=${env.BACKEND_PORT} -t ${env.ECR_REPO}:${env.IMAGE_TAG} ."

                //sh 'docker build --build-arg BACKEND_API=$BACKEND_API --build-arg BACKEND_PORT=$BACKEND_PORT -t $ECR_REPO:$IMAGE_TAG .'
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                withCredentials([
                    [
                        $class: 'AmazonWebServicesCredentialsBinding',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                        // credentialsId: 'your-aws-credentials-id'
                    ]
                ]) {
                    sh 'aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin ECR_REGISTRY/$ECR_REPO'
                    sh 'docker push ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG'
                }
            }
        }
     }
  }



// sh 'docker build --build-arg BACKEND_API=$BACKEND_API --build-arg BACKEND_PORT=$BACKEND_PORT -t $ECR_REPO:$IMAGE_TAG .'